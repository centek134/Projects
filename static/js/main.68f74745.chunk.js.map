{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","contextRef","useRef","useState","isDrawing","setIsDrawing","color","setColor","lineWidth","setLineWidth","circle","square","eraser","activeBtn","setActiveBtn","useEffect","ctx","document","getElementById","getContext","current","className","onClick","strokeStyle","lineCap","clearRect","window","innerWidth","innerHeight","type","min","max","defaultValue","onChange","event","target","value","lineWidthHandler","colorSwitch","id","onMouseDown","e","beginPath","moveTo","clientX","clientY","onMouseMove","lineTo","stroke","onMouseUp","closePath","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qKAiGeA,EA/FH,WAEV,IAAMC,EAAaC,iBAAO,MAFV,EAGkBC,oBAAS,GAH3B,mBAGTC,EAHS,KAGEC,EAHF,OAIUF,mBAAS,SAJnB,mBAITG,EAJS,KAIFC,EAJE,OAKkBJ,mBAAS,GAL3B,mBAKTK,EALS,KAKEC,EALF,OAMkBN,mBAAS,CACzCO,QAAQ,EACRC,QAAQ,EACRC,QAAQ,IATM,mBAMTC,EANS,KAMEC,EANF,KAYhBC,qBAAU,WACN,IACMC,EADSC,SAASC,eAAe,UACpBC,WAAW,MAC9BlB,EAAWmB,QAAUJ,KAwDvB,OACE,sBAAKK,UAAU,UAAf,UACE,qBAAKA,UAAU,UAAf,SACE,sBAAKA,UAAU,OAAf,UACE,wBAAQA,UAAWR,EAAUH,OAAQ,SAAW,GAAIY,QAnClD,WACVR,EAAa,CAACJ,QAAO,EAAMC,QAAQ,EAAOC,QAAQ,IAClDX,EAAWmB,QAAQG,YAAcjB,EACjCL,EAAWmB,QAAQI,QAAU,SAgCrB,SAAoE,mBAAGH,UAAU,oBACjF,wBAAQA,UAAWR,EAAUF,OAAQ,SAAW,GAAIW,QA9B5C,WAChBR,EAAa,CAACJ,QAAO,EAAOC,QAAQ,EAAMC,QAAQ,IAClDX,EAAWmB,QAAQG,YAAcjB,EACjCL,EAAWmB,QAAQI,QAAU,UA2BrB,SAA0E,mBAAGH,UAAU,oBACvF,wBAAQA,UAAWR,EAAUD,OAAQ,SAAW,GAAIU,QAzBhD,WACZR,EAAa,CAACJ,QAAO,EAAOC,QAAQ,EAAOC,QAAQ,IACnDX,EAAWmB,QAAQG,YAAc,QACjCtB,EAAWmB,QAAQZ,UAAY,IAsBvB,SAAsE,mBAAGa,UAAU,oBACnF,wBAAQC,QAzCJ,WACZrB,EAAWmB,QAAQK,UAAU,EAAE,EAAEC,OAAOC,WAAYD,OAAOE,cAwCnD,mBACA,uBAAOP,UAAU,QAAQQ,KAAK,QAAQC,IAAM,IAAIC,IAAM,KAAKC,aAAe,IAAIC,SAAY,SAACC,GAAD,OAb3E,SAACA,GACxBzB,EAAayB,EAAMC,OAAOC,OAC1BnC,EAAWmB,QAAQZ,UAAYA,EAW8E6B,CAAiBH,MACtH,uBAAOb,UAAU,QAAQQ,KAAK,QAAQI,SAAY,SAACC,GAAD,OAtBxC,SAACA,GAChBrB,EAAUD,SAGbL,EAAS2B,EAAMC,OAAOC,OACtBnC,EAAWmB,QAAQG,YAAcjB,GAiBoCgC,CAAYJ,WAG7E,wBACAK,GAAK,SACLC,YAnEe,SAACC,GACpBxC,EAAWmB,QAAQsB,YACnBzC,EAAWmB,QAAQuB,OAAOF,EAAEG,QAASH,EAAEI,SACvCxC,GAAa,IAiETyC,YAzDU,SAACL,GACXrC,IAGJH,EAAWmB,QAAQ2B,OAAON,EAAEG,QAASH,EAAEI,SACvC5C,EAAWmB,QAAQ4B,WAqDfC,UA/DgB,WACpBhD,EAAWmB,QAAQ8B,YACnB7C,GAAa,IA8DT8C,MAASzB,OAAOC,WAChByB,OAAU1B,OAAOE,kBC/EVyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASC,eAAe,SAG1BmC,K","file":"static/js/main.68f74745.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useRef, useState } from 'react';\nconst App = () => {\n\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [color, setColor] = useState(\"black\");\n  const [lineWidth, setLineWidth] = useState(1);\n  const [activeBtn, setActiveBtn] = useState({\n    circle: true,\n    square: false,\n    eraser: false\n  });\n\n  useEffect(() => {\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n      contextRef.current = ctx;\n  });\n\n  const startDrawing = (e) => {\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(e.clientX, e.clientY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const drawing = (e) => {\n    if(!isDrawing){\n      return;\n    };\n    contextRef.current.lineTo(e.clientX, e.clientY);\n    contextRef.current.stroke();\n  };\n\n  const clear = () => {\n    contextRef.current.clearRect(0,0,window.innerWidth, window.innerHeight);\n  };\n  const pen = () => {\n    setActiveBtn({circle:true, square: false, eraser: false});\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineCap = \"round\";\n  };\n\n  const squarePen = () => {\n    setActiveBtn({circle:false, square: true, eraser: false});\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineCap = \"square\";\n  }\n\n  const erase = () => {\n    setActiveBtn({circle:false, square: false, eraser: true});\n    contextRef.current.strokeStyle = \"white\";\n    contextRef.current.lineWidth = 20;\n  }\n\n  const colorSwitch = (event) => {\n    if(activeBtn.eraser){\n      return;\n    }\n    setColor(event.target.value);\n    contextRef.current.strokeStyle = color;\n  }\n\n  const lineWidthHandler = (event) => {\n    setLineWidth(event.target.value);\n    contextRef.current.lineWidth = lineWidth;\n  }\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"toolbar\">\n          <div className=\"btns\">\n            <button className={activeBtn.circle? \"active\" : \"\"} onClick = {pen}><i className=\"fas fa-circle\"></i></button>\n            <button className={activeBtn.square? \"active\" : \"\"} onClick = {squarePen}><i className=\"fas fa-square\"></i></button>\n            <button className={activeBtn.eraser? \"active\" : \"\"} onClick = {erase}><i className=\"fas fa-eraser\"></i></button>\n            <button onClick = {clear}>Clear</button>\n            <input className=\"range\" type=\"range\" min = \"1\" max = \"30\" defaultValue = \"1\" onChange = {(event) => lineWidthHandler(event)}></input>\n            <input className=\"color\" type=\"color\" onChange = {(event) => colorSwitch(event)}></input>\n          </div>\n        </div>\n        <canvas \n        id = \"canvas\" \n        onMouseDown = {startDrawing} \n        onMouseMove={drawing}\n        onMouseUp = {finishDrawing}\n        width = {window.innerWidth}\n        height = {window.innerHeight}>\n        </canvas>\n      </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}